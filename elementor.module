<?php

// require drupal_get_path('module', 'elementor') . '/elementor_drupal/ElementorPlugin.php';

use Drupal\Core\Form\FormStateInterface;
use Drupal\elementor\ElementorPlugin;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Drupal\Core\DependencyInjection\ContainerInjectionInterface;

/**
 * Implements hook_page_attachments().
 */
function elementor_page_attachments(array &$attachments)
{
  $attachments['#attached']['library'][] = 'elementor/global';
}

/**
 * Implements hook_theme().
 */

function elementor_theme($existing, $type, $theme, $path)
{

  return [
    'elementor_field' => [
      'variables' => [
        'is_rtl' => null,
        'elementor_data' => null,
        'elementor_tmp' => null,
        'base_path' => \Drupal::request()->getBasePath()
      ],
    ],
    // 'elementor_editor' => [
    //   'template' => 'elementor-editor',
    //   'variables' => [
    //     'is_rtl' => null,
    //     'elementor_data' => null,
    //     'elementor_tmp' => null,
    //     'base_path' => \Drupal::request()->getBasePath()
    //   ],
    // ],

  ];
}

/**
 * Implements hook_theme_suggestions_alter().
 */
function elementor_theme_suggestions_alter(array &$suggestions, array $variables, $hook)
{
  if ($hook !== 'page' && $hook !== 'node') {
    return;
  }

  $node = \Drupal::routeMatch()->getParameter('node');
  $allow_content_types = \Drupal::config('elementor.settings')->get('node_types');

  if ($node && in_array($node->getType(), $allow_content_types, true)) {
    $config = ElementorPlugin::$instance->sdk->get_data($node->id());

    if ($hook == 'page' && $config['settings']['template'] == 'elementor_canvas') {
      $suggestions[] = 'elementor_field';
    } else if ($hook == 'page' && $config['settings']['template'] == 'elementor_header_footer') {
      $suggestions[] = 'elementor_field';
    } else if ($hook == 'node' && !$config['settings']['template']) {
      $suggestions[] = 'elementor_field';
    }
  }

}

/**
 * Implements hook_preprocess().
 */

 function elementor_preprocess_node(&$variables)
 {
   $node = \Drupal::routeMatch()->getParameter('node');
   $allow_content_types = \Drupal::config('elementor.settings')->get('node_types');

   if ($node && in_array($node->getType(), $allow_content_types, true)) {
     $variables['#cache']['max-age'] = 0;
   }
 }

/**
 * Implements hook_preprocess().
 */

 function elementor_preprocess_elementor_field(&$variables)
 {
   global $base_path;
   $node = \Drupal::routeMatch()->getParameter('node');
   $id = $node->id();
   $ElementorPlugin = ElementorPlugin::$instance;
   $frontend_data = $ElementorPlugin->frontend($id);

   $dir = \Drupal::languageManager()->getCurrentLanguage()->getDirection();
   $variables['is_rtl'] = $dir == 'rtl';
   $variables['base_path'] = $base_path . \Drupal::moduleHandler()->getModule('elementor')->getPath();
   $variables['elementor_tmp'] = $frontend_data;
   $variables['uid'] = $id;
   $variables['#cache']['max-age'] = 0;
 }
/**
 * Implements hook__menu_local_tasks_alter().
 */

 function elementor_menu_local_tasks_alter(&$data, $route_name)
 {
   global $base_url;

   $allow_content_types = \Drupal::config('elementor.settings')->get('node_types');
   $node = \Drupal::routeMatch()->getParameter('node');
   if ($node) {
     $nid = $node->id();
   } else {
     $nid = 1;
   }
   if ($route_name == 'entity.node.canonical' && in_array($node->getType(), $allow_content_types, true)) {
     $data['tabs'][0]['entity.node.canonical'] = [
       '#theme' => 'menu_local_task',
       '#link' => [
         'title' => t('Elementor'),
         'url' => \Drupal\Core\Url::fromRoute('elementor.editor', ['node' => $nid]),
         'localized_options' => [
           'attributes' => [
             'title' => t('Edit with Elementor'),
           ],
         ],
       ],
     ];
   }
 }

/**
 * Implements hook_form_alter().
 */
function elementor_form_alter(&$form, FormStateInterface $form_state, $form_id)
{
  $params = explode("_", $form_id);
  if ($params[0] == 'node') {
    $allow_content_types = \Drupal::config('elementor.settings')->get('node_types');

    // Ensure $allow_content_types is an array before using in_array
    if (is_array($allow_content_types) && in_array($params[1], $allow_content_types, true)) {
      $form['edit_with_elementor'] = [
        '#type' => 'submit',
        '#value' => t('Edit with Elementor'),
        '#weight' => 0.1,
        '#attributes' => [
          'class' => ['eicon-elementor', 'edit-with-elementor'],
        ],
      ];

      $form['#submit'][] = 'elementor_edit_with_elementor_form_submit';
    }
  }
}


/**
 * Form submit handler.
 */
function elementor_edit_with_elementor_form_submit($form, FormStateInterface &$form_state)
{
  $entity = $form_state->getFormObject()->getEntity();
  $entity->save();

  // Use watchdog() or Drupal's logging system for debugging.
  \Drupal::logger('elementor')->notice('Node @nid is saved.', ['@nid' => $entity->id()]);

  $form_state->setRedirect('elementor.editor', ['node' => $entity->id()]);
}

